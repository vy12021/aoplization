buildscript {
  ext {
    android_version = '7.1.2'
    kotlin_version = '1.6.20'
  }
  repositories {
    maven {
      url mavenRepository
      credentials {
        username mavenUsername
        password mavenPassword
      }
      authentication {
        basic(BasicAuthentication)
      }
    }
    google()
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
    maven { url 'https://maven.aliyun.com/repository/google' }
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$android_version"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    classpath "de.jjohannes.gradle:extra-java-module-info:0.11"
  }
}

//apply plugin: 'aoplization'
//
//aoplization {
//  debugMode = true
//  incremental = false
//  includeModules = ['^libra.*', '^viewpager.*']
//  includeJars = ['clase']
//  includePackages = ['com.bhb.android']
//  excludePackages = ['kotlin', 'kotlinx', 'android', 'androidx', 'org.jetbrains']
//}

ext {

  minSdkVersion = 19
  targetSdkVersion = 31
  compileSdkVersion = 32
  buildToolsVersion = '32.0.0'

  applicationId = "com.bhb.android.componentization"
  versionName = "1.0.0"
  versionCode = 100000000

  sourceCompatibilityVersion = JavaVersion.VERSION_11
  targetCompatibilityVersion = JavaVersion.VERSION_11

}

allprojects {project ->
  repositories {
    maven {
      url mavenRepository
      credentials {
        username mavenUsername
        password mavenPassword
      }
      authentication {
        basic(BasicAuthentication)
      }
    }
    google()
    mavenCentral()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
    maven { url 'https://maven.aliyun.com/repository/google' }
  }
}

subprojects {

  afterEvaluate {
    def plugins = getPlugins()
    def androidLibrary = plugins.hasPlugin('com.android.library')
    def androidApp = plugins.hasPlugin('com.android.application')
    def kotlinSupport = plugins.hasPlugin('kotlin-kapt')

    java {
      modularity.inferModulePath = true
    }

    if (!(androidLibrary || androidApp)) {
      sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
      targetCompatibility = rootProject.ext.targetCompatibilityVersion
      return
    }

    dependencies {
      api fileTree(dir: "${project.projectDir}/libs", include: ['*.jar'])
      implementation 'androidx.appcompat:appcompat:1.4.1'
      implementation 'androidx.annotation:annotation:1.3.0'
      testImplementation 'junit:junit:4.13.2'
      androidTestImplementation 'androidx.test.ext:junit:1.1.3'
      androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    }

    if (kotlinSupport) {
      kapt {
        useBuildCache = true
      }
    }

    android {
      compileSdkVersion rootProject.ext.compileSdkVersion
      buildToolsVersion rootProject.ext.buildToolsVersion
      defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        if (androidApp) {
          applicationId rootProject.ext.applicationId
          versionCode rootProject.ext.versionCode
          versionName rootProject.ext.versionName
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
      }
      sourceSets {
        main {
          java.srcDirs += ['src/main/kotlin']
          jni.srcDirs = ['src/main/cpp']
          jniLibs.srcDirs += ['libs']
        }
      }
      aaptOptions {
        cruncherEnabled false
      }
      compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
      }
      if (kotlinSupport) {
        kotlinOptions {
          freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn -Xuse-old-class-files-reading"
          jvmTarget = '11'
        }
      }
      lintOptions {
        abortOnError false
      }
      testOptions {
        unitTests.returnDefaultValues = true
      }
      packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
      }
    }
  }

}

task clean(type: Delete) {
  delete rootProject.buildDir
}
